--- openbsd_usb.c.orig	Wed Jun  3 15:22:32 2015
+++ openbsd_usb.c	Wed Jul  1 19:21:38 2015
@@ -29,6 +29,7 @@
 #include <unistd.h>
 
 #include <dev/usb/usb.h>
+#include <dev/usb/usbdi.h>
 
 #include "libusbi.h"
 
@@ -74,6 +75,8 @@
 static int obsd_submit_transfer(struct usbi_transfer *);
 static int obsd_cancel_transfer(struct usbi_transfer *);
 static void obsd_clear_transfer_priv(struct usbi_transfer *);
+static int obsd_handle_events(struct libusb_context *ctx, struct pollfd *,
+    nfds_t, int);
 static int obsd_handle_transfer_completion(struct usbi_transfer *);
 static int obsd_clock_gettime(int, struct timespec *);
 
@@ -83,6 +86,7 @@
 static int _errno_to_libusb(int);
 static int _cache_active_config_descriptor(struct libusb_device *);
 static int _sync_control_transfer(struct usbi_transfer *);
+static int _sync_bulk_transfer(struct usbi_transfer *itransfer);
 static int _sync_gen_transfer(struct usbi_transfer *);
 static int _access_endpoint(struct libusb_transfer *);
 
@@ -127,7 +131,7 @@
 	obsd_cancel_transfer,
 	obsd_clear_transfer_priv,
 
-	NULL,				/* handle_events() */
+	obsd_handle_events,
 	obsd_handle_transfer_completion,
 
 	obsd_clock_gettime,
@@ -258,6 +262,8 @@
 		if (dpriv->fd < 0)
 			return _errno_to_libusb(errno);
 
+		usbi_add_pollfd(HANDLE_CTX(handle), dpriv->fd, POLLIN | POLLRDNORM);
+
 		usbi_dbg("open %s: fd %d", devnode, dpriv->fd);
 	}
 
@@ -270,6 +276,8 @@
 	struct handle_priv *hpriv = (struct handle_priv *)handle->os_priv;
 	struct device_priv *dpriv = (struct device_priv *)handle->dev->os_priv;
 
+	usbi_remove_pollfd(HANDLE_CTX(handle), dpriv->fd);
+
 	if (dpriv->devname) {
 		usbi_dbg("close: fd %d", dpriv->fd);
 
@@ -470,12 +478,14 @@
 {
 	struct libusb_transfer *transfer;
 	struct handle_priv *hpriv;
+	struct device_priv *dpriv;
 	int err = 0;
 
 	usbi_dbg("");
 
 	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
 	hpriv = (struct handle_priv *)transfer->dev_handle->os_priv;
+	dpriv = (struct device_priv *)transfer->dev_handle->dev->os_priv;
 
 	switch (transfer->type) {
 	case LIBUSB_TRANSFER_TYPE_CONTROL:
@@ -490,6 +500,13 @@
 		err = _sync_gen_transfer(itransfer);
 		break;
 	case LIBUSB_TRANSFER_TYPE_BULK:
+		if (IS_XFEROUT(transfer) &&
+		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
+			err = LIBUSB_ERROR_NOT_SUPPORTED;
+			break;
+		}
+		err = _sync_bulk_transfer(itransfer);
+		break;
 	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
 		if (IS_XFEROUT(transfer) &&
 		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
@@ -506,7 +523,12 @@
 	if (err)
 		return (err);
 
-	usbi_signal_transfer_completion(itransfer);
+	if (transfer->type == LIBUSB_TRANSFER_TYPE_CONTROL) {
+		if (dpriv->devname == NULL)
+			usbi_signal_transfer_completion(itransfer);
+	} else {
+		usbi_signal_transfer_completion(itransfer);
+	}
 
 	return (LIBUSB_SUCCESS);
 }
@@ -528,6 +550,121 @@
 }
 
 int
+obsd_handle_events(struct libusb_context *ctx, struct pollfd *fds, nfds_t nfds,
+    int num_ready)
+{
+	struct libusb_device_handle *handle;
+	struct handle_priv *hpriv = NULL;
+	struct device_priv *dpriv = NULL;
+	struct usbi_transfer *itransfer;
+	struct ctl_urb get_urb;
+	struct pollfd *pollfd;
+	int i, err = 0;
+	int error_code = LIBUSB_TRANSFER_COMPLETED;
+
+	usbi_dbg("");
+
+	pthread_mutex_lock(&ctx->open_devs_lock);
+	for (i = 0; i < nfds && num_ready > 0; i++) {
+		pollfd = &fds[i];
+
+		if (!pollfd->revents)
+			continue;
+
+		hpriv = NULL;
+		num_ready--;
+		list_for_each_entry(handle, &ctx->open_devs, list,
+		    struct libusb_device_handle) {
+			hpriv = (struct handle_priv *)handle->os_priv;
+			dpriv = (struct device_priv *)handle->dev->os_priv;
+
+			if (dpriv->fd == pollfd->fd)
+				break;
+
+			hpriv = NULL;
+		}
+
+		if (NULL == hpriv) {
+			usbi_dbg("fd %d is not an event pipe!", pollfd->fd);
+			err = ENOENT;
+			break;
+		}
+
+		if (pollfd->revents & POLLERR) {
+			usbi_dbg("got a disconnect event");
+			usbi_remove_pollfd(HANDLE_CTX(handle), dpriv->fd);
+			usbi_handle_disconnect(handle);
+			continue;
+		}
+
+		while (1) {
+repeat:
+			if (err = ioctl(dpriv->fd, USB_GET_COMPLETED, &get_urb)) {
+				err = 0;
+				break;
+			}
+			itransfer = get_urb.user_context;
+
+			usbi_dbg("geturb status %d", get_urb.status);
+
+			switch(get_urb.status) {
+			case USBD_NORMAL_COMPLETION:
+			case USBD_SHORT_XFER:
+				usbi_mutex_lock(&itransfer->lock);
+				itransfer->transferred += get_urb.actlen;
+				usbi_dbg("transferred %d", itransfer->transferred);
+				usbi_mutex_unlock(&itransfer->lock);
+
+				error_code = LIBUSB_TRANSFER_COMPLETED;
+				break;
+			case USBD_IN_PROGRESS:
+				goto repeat;
+			/* errors */
+			case USBD_CANCELLED:
+				error_code = LIBUSB_TRANSFER_CANCELLED;
+				break;
+			case USBD_STALLED:
+				error_code = LIBUSB_TRANSFER_STALL;
+				break;
+			case USBD_PENDING_REQUESTS:
+			case USBD_NOT_STARTED:
+			case USBD_INVAL:
+			case USBD_NOMEM:
+			case USBD_BAD_ADDRESS:
+			case USBD_IN_USE:
+			case USBD_NO_ADDR:
+			case USBD_SET_ADDR_FAILED:
+			case USBD_NO_POWER:
+			case USBD_TOO_DEEP:
+			case USBD_IOERROR:
+			case USBD_NOT_CONFIGURED:
+			case USBD_TIMEOUT:
+			case USBD_INTERRUPTED:
+
+			case USBD_ERROR_MAX:
+			default:
+				error_code = LIBUSB_TRANSFER_ERROR;
+				break;
+			}
+			if ((err = usbi_handle_transfer_completion(itransfer, error_code))) {
+				usbi_dbg("error completing");
+				break;
+			}
+		}
+		if (err) {
+			err = errno;
+			break;
+		}
+	}
+	pthread_mutex_unlock(&ctx->open_devs_lock);
+
+	if (err)
+		return _errno_to_libusb(err);
+
+	return (LIBUSB_SUCCESS);
+}
+
+int
 obsd_handle_transfer_completion(struct usbi_transfer *itransfer)
 {
 	return usbi_handle_transfer_completion(itransfer, LIBUSB_TRANSFER_COMPLETED);
@@ -628,6 +765,7 @@
 	struct libusb_control_setup *setup;
 	struct device_priv *dpriv;
 	struct usb_ctl_request req;
+	struct ctl_urb put_urb;
 
 	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
 	dpriv = (struct device_priv *)transfer->dev_handle->dev->os_priv;
@@ -669,11 +807,18 @@
 		}
 		close(fd);
 	} else {
-		if ((ioctl(dpriv->fd, USB_SET_TIMEOUT, &transfer->timeout)) < 0)
+		put_urb.req = req;
+		put_urb.user_context = itransfer;
+
+		if ((ioctl(dpriv->fd, USB_SET_TIMEOUT, &transfer->timeout)) < 0) {
 			return _errno_to_libusb(errno);
+		}
 
-		if ((ioctl(dpriv->fd, USB_DO_REQUEST, &req)) < 0)
+		if ((ioctl(dpriv->fd, USB_DO_REQUEST, &put_urb)) < 0) {
 			return _errno_to_libusb(errno);
+		}
+
+		return (0);
 	}
 
 	itransfer->transferred = req.ucr_actlen;
@@ -716,6 +861,87 @@
 	return (hpriv->endpoints[endpt]);
 }
 
+int
+_sync_bulk_transfer(struct usbi_transfer *itransfer)
+{
+	struct libusb_transfer *transfer;
+	struct device_priv *dpriv;
+	struct ctl_urb put_urb;
+	struct ctl_urb get_urb;
+	int fd, nr = 1;
+	int bulk_buffer_len = 1024;
+	int num_urbs = 0;
+	int last_urb_partial = 0;
+
+	usbi_dbg("");
+
+	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
+	dpriv = (struct device_priv *)transfer->dev_handle->dev->os_priv;
+
+	if (dpriv->devname == NULL)
+		return (LIBUSB_ERROR_NOT_SUPPORTED);
+
+	/*
+	 * Bulk, Interrupt or Isochronous transfer depends on the
+	 * endpoint and thus the node to open.
+	 */
+	if ((fd = _access_endpoint(transfer)) < 0)
+		return _errno_to_libusb(errno);
+
+	if ((ioctl(fd, USB_SET_TIMEOUT, &transfer->timeout)) < 0)
+		return _errno_to_libusb(errno);
+
+	if (IS_XFERIN(transfer)) {
+		if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
+			if ((ioctl(fd, USB_SET_SHORT_XFER, &nr)) < 0)
+				return _errno_to_libusb(errno);
+
+		usbi_dbg("transfer length %d", transfer->length);
+		num_urbs = transfer->length / bulk_buffer_len;
+		if (transfer->length == 0) {
+			num_urbs = 1;
+		} else if ((transfer->length % bulk_buffer_len) > 0) {
+			printf("partial %d", transfer->length % bulk_buffer_len);
+			last_urb_partial = 1;
+			num_urbs++;
+		}
+		usbi_dbg("num_urbs %d", num_urbs);
+
+		for (int i = 0; i < num_urbs; i++) {
+			usbi_dbg("urb %d", i);
+			put_urb.buffer = transfer->buffer + (i * bulk_buffer_len);
+			if (i == num_urbs - 1 && last_urb_partial) {
+				put_urb.actlen = transfer->length % bulk_buffer_len;
+			} else if (transfer->length == 0) {
+				put_urb.actlen = 0;
+			} else {
+				put_urb.actlen = bulk_buffer_len;
+			}
+			put_urb.user_context = itransfer;
+			if (nr = ioctl(fd, USB_ASYNC_SUBMIT, &put_urb))
+				return _errno_to_libusb(errno);
+			while (ioctl(fd, USB_ASYNC_COMPLETE, &get_urb)) { }
+			if (put_urb.user_context == get_urb.user_context) {
+				usbi_dbg("transferred %d", get_urb.actlen);
+				itransfer->transferred += get_urb.actlen;
+			} else {
+				usbi_dbg("wrong transfer received");
+				return (-1);
+			}
+		}
+		usbi_dbg("successful_transfer");
+		usbi_dbg("transferred %d", itransfer->transferred);
+	} else {
+		nr = write(fd, transfer->buffer, transfer->length);
+		if (nr < 0)
+			return _errno_to_libusb(errno);
+
+		itransfer->transferred = nr;
+	}
+
+
+	return (0);
+}
 int
 _sync_gen_transfer(struct usbi_transfer *itransfer)
 {
