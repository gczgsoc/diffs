--- ugen.c.orig	Wed Jun  3 14:35:32 2015
+++ ugen.c	Wed Jun 24 21:26:18 2015
@@ -46,9 +46,13 @@
 #include <sys/vnode.h>
 #include <sys/poll.h>
 
+#include <machine/bus.h>
+
 #include <dev/usb/usb.h>
 #include <dev/usb/usbdi.h>
 #include <dev/usb/usbdi_util.h>
+#include <dev/usb/usbdivar.h>
+#include <dev/usb/usb_mem.h>
 #include <dev/usb/usbdevs.h>
 
 #ifdef UGEN_DEBUG
@@ -104,6 +108,8 @@
 	u_char sc_secondary;
 };
 
+void ugen_request_async_callback(struct usbd_xfer *, void *, usbd_status);
+
 void ugenintr(struct usbd_xfer *xfer, void *addr, usbd_status status);
 void ugen_isoc_rintr(struct usbd_xfer *xfer, void *addr, usbd_status status);
 int ugen_do_read(struct ugen_softc *, int, struct uio *, int);
@@ -130,6 +136,35 @@
 	sizeof(struct ugen_softc), ugen_match, ugen_attach, ugen_detach
 };
 
+TAILQ_HEAD(, ctl_urb) urb_entry_head;
+
+void ugen_request_async_callback(struct usbd_xfer *xfer, void *priv, usbd_status s) {
+	struct ctl_urb *urb = priv;
+	struct ugen_endpoint *sce = (struct ugen_endpoint *)urb->sce;
+
+        if (s == USBD_NORMAL_COMPLETION || s == USBD_SHORT_XFER) {
+		/* Only if USBD_SHORT_XFER_OK is set. */
+		urb->actlen = xfer->actlen;
+		urb->dmabuf = KERNADDR(&xfer->dmabuf, 0);
+		urb->xfer = xfer;
+
+		TAILQ_INSERT_TAIL(&urb_entry_head, urb, entries);
+		if (sce != NULL) {
+			wakeup(sce);
+			//if (sce->state & UGEN_ASLP) {
+			//	printf("is asleep\n");
+			//	sce->state &= ~UGEN_ASLP;
+			//	DPRINTFN(5, ("ugen_intr: waking %p\n", sce));
+			//	wakeup(sce);
+			//}
+		}
+        }
+	else if (s == USBD_CANCELLED) {
+	}
+	else if (s == USBD_STALLED) {
+	}
+}
+
 int
 ugen_match(struct device *parent, void *match, void *aux)
 {
@@ -150,6 +185,8 @@
 	usbd_status err;
 	int conf;
 
+	TAILQ_INIT(&urb_entry_head);
+
 	sc->sc_udev = udev = uaa->device;
 
 	if (usbd_get_devcnt(udev) > 0)
@@ -1143,13 +1180,18 @@
 	}
 	case USB_DO_REQUEST:
 	{
-		struct usb_ctl_request *ur = (void *)addr;
-		int len = UGETW(ur->ucr_request.wLength);
+		struct ctl_urb *urb = (void *)addr;
+		struct ctl_urb *kurb;
+		struct usb_ctl_request *ur = &urb->req;
+		struct usbd_xfer *xfer;
+		int len;
 		struct iovec iov;
 		struct uio uio;
 		void *ptr = 0;
 		int error = 0;
 
+		len = UGETW(ur->ucr_request.wLength);
+
 		if (!(flag & FWRITE))
 			return (EPERM);
 		/* Avoid requests that would damage the bus integrity. */
@@ -1163,6 +1205,18 @@
 
 		if (len < 0 || len > 32767)
 			return (EINVAL);
+
+		kurb = malloc(sizeof(*kurb), M_TEMP, M_WAITOK);
+		if (kurb == NULL)
+			return (ENOMEM);
+
+		*kurb = *urb;
+
+		xfer = usbd_alloc_xfer(sc->sc_udev);
+
+		if (xfer == NULL)
+			return (ENOMEM);
+
 		if (len != 0) {
 			iov.iov_base = (caddr_t)ur->ucr_data;
 			iov.iov_len = len;
@@ -1175,34 +1229,107 @@
 				ur->ucr_request.bmRequestType & UT_READ ?
 				UIO_READ : UIO_WRITE;
 			uio.uio_procp = p;
-			ptr = malloc(len, M_TEMP, M_WAITOK);
+			ptr = usbd_alloc_buffer(xfer, len);
+			if (ptr == 0) {
+				free(kurb, M_TEMP, sizeof(*kurb));
+				usbd_free_xfer(xfer);
+				return (ENOMEM);
+			}
 			if (uio.uio_rw == UIO_WRITE) {
 				error = uiomovei(ptr, len, &uio);
-				if (error)
-					goto ret;
+				if (error) {
+					free(kurb, M_TEMP, sizeof(*kurb));
+					usbd_free_xfer(xfer);
+					return (error);
+				}
 			}
 		}
+
 		sce = &sc->sc_endpoints[endpt][IN];
-		err = usbd_do_request_flags(sc->sc_udev, &ur->ucr_request,
-			  ptr, ur->ucr_flags, &ur->ucr_actlen, sce->timeout);
+
+		kurb->sce = sce;
+
+		err = usbd_request_async(xfer, &ur->ucr_request, kurb, (usbd_callback) ugen_request_async_callback);
+
 		if (err) {
 			error = EIO;
-			goto ret;
+			free(kurb, M_TEMP, sizeof(*kurb));
+			usbd_free_xfer(xfer);
+			return (error);
 		}
-		/* Only if USBD_SHORT_XFER_OK is set. */
-		if (len > ur->ucr_actlen)
-			len = ur->ucr_actlen;
+		return (0);
+	}
+	case USB_GET_COMPLETED:
+	{
+		struct ctl_urb *urb = (struct ctl_urb *)addr;
+		struct ctl_urb *kurb;
+		struct usb_ctl_request *ur;
+		int s;
+		int error = 0;
+		int len;
+		struct iovec iov;
+		struct uio uio;
+
+		s = splusb();
+		kurb = TAILQ_FIRST(&urb_entry_head);
+		while (kurb == NULL) {
+			/* Block until transfer completes. */
+			sce = &sc->sc_endpoints[endpt][IN];
+			if (sce == NULL) {
+				splx(s);
+				return (EINVAL);
+			}
+			sce->state |= UGEN_ASLP;
+			DPRINTFN(5, ("ugengetcompleted: sleep on %p\n", sce));
+			error = tsleep(sce, PZERO | PCATCH, "ugenri",
+			    (sce->timeout * hz) / 1000);
+			sce->state &= ~UGEN_ASLP;
+			DPRINTFN(5, ("ugengetcompleted: woke, error=%d\n", error));
+			if (usbd_is_dying(sc->sc_udev)) {
+				splx(s);
+				return (EIO);
+			}
+			if (error == EWOULDBLOCK) {	/* timeout, return 0 */
+				splx(s);
+				return (EIO);
+			}
+			if (error == EINTR) { /* you pressed Ctrl+C */
+				splx(s);
+				return (EINTR);
+			}
+			kurb = TAILQ_FIRST(&urb_entry_head);
+		}
+		TAILQ_REMOVE(&urb_entry_head, kurb, entries);
+		splx(s);
+		ur = &kurb->req;
+		len = UGETW(ur->ucr_request.wLength);
+		if (len > kurb->actlen)
+			len = kurb->actlen;
 		if (len != 0) {
+			iov.iov_base = (caddr_t)ur->ucr_data;
+			iov.iov_len = len;
+			uio.uio_iov = &iov;
+			uio.uio_iovcnt = 1;
+			uio.uio_resid = len;
+			uio.uio_offset = 0;
+			uio.uio_segflg = UIO_USERSPACE;
+			uio.uio_rw =
+				ur->ucr_request.bmRequestType & UT_READ ?
+				UIO_READ : UIO_WRITE;
+			uio.uio_procp = p;
 			if (uio.uio_rw == UIO_READ) {
-				error = uiomovei(ptr, len, &uio);
-				if (error)
-					goto ret;
+				error = uiomove(kurb->dmabuf, len, &uio);
+				if (error) {
+					usbd_free_xfer(kurb->xfer);
+					free(kurb, M_TEMP, sizeof(*kurb));
+					return (-1);
+				}
 			}
 		}
-	ret:
-		if (ptr)
-			free(ptr, M_TEMP, 0);
-		return (error);
+		*urb = *kurb;
+		usbd_free_xfer(kurb->xfer);
+		free(kurb, M_TEMP, sizeof(*kurb));
+		return (0);
 	}
 	case USB_GET_DEVICEINFO:
 		usbd_fill_deviceinfo(sc->sc_udev,
@@ -1259,6 +1386,14 @@
 #endif
 	s = splusb();
 	switch (sce->edesc->bmAttributes & UE_XFERTYPE) {
+	case UE_CONTROL:
+		if (events & (POLLIN | POLLRDNORM)) {
+			if (!TAILQ_EMPTY(&urb_entry_head))
+				revents |= events & (POLLIN | POLLRDNORM);
+			else
+				selrecord(p, &sce->rsel);
+		}
+		break;
 	case UE_INTERRUPT:
 		if (events & (POLLIN | POLLRDNORM)) {
 			if (sce->q.c_cc > 0)
